#Exploratory data analysis

#shape of data

pd.DataFrame({x:data[x].shape for x in data.keys()})
    .T
    .rename(columns={0:'rows',1:'columns'})
    .sort_values('rows',ascending=False)
    
# Variable summary

summaries = [analysis.get_variable_summary(data[x]) for x in data.keys()]
display_as_tabs([(x, summaries[idx]) for idx, x in enumerate(data.keys())])

data["opp_data_df"][data["opp_data_df"]['誰opportunity id']==5]['decision date'].unique()
data["prd_data_df"][data["prd_data_df"]['誰opportunity id']==5]['decision date'].unique()
data["opp_data_df"].rename(columns={"decision date":'opp decision date'},inplace=True)
data["prd_data_df"].rename(columns={"decision date":'prd decision date'},inplace=True)
data["opp_data_df"].isnull().sum()
data["opp_data_df"].isna().sum()*100/len(data["opp_data_df"]['risk status'])
data["prd_data_df"].isna().sum()
data["prd_data_df"].isna().sum()*100/len(data["prd_data_df"]['product id'])

# Expected data validation

# creation time cannot exceed decision date
data['opp_data_df']['opp decision date'][0]
data['opp_data_df']['creation date'][0]
data['opp_data_df']['creation date']<data['opp_data_df']['opp decision date']

(pd.to_datetime(data['opp_data_df']['creation date'],format='%d-%m-%Y')<=pd.to_datetime(data['opp_data_df']['opp decision date'],format='%d-%m-%Y')).sum()/len(data['opp_data_df']['creation date'])

#Health analysis

summaries = [analysis.get_variable_summary(data[x]) for x in data.keys()]
display_as_tabs([(x, summaries[idx]) for idx, x in enumerate(data.keys())])
data["opp_data_df"].isna().sum()*100/len(data["opp_data_df"]['誰opportunity id'])
data["prd_data_df"].isna().sum()*100/len(data["prd_data_df"]['誰opportunity id'])

ummaries_and_plots = [analysis.get_data_health_summary(data[x], return_plot=True) for x in data.keys()]
plots = [x[1] for x in summaries_and_plots]
display_as_tabs([(x, plots[idx]) for idx, x in enumerate(data.keys())])

#Missing values summary
summaries_and_plots = [analysis.get_missing_values_summary(data[x], return_plot=True) for x in data.keys()]
plots = [x[1] for x in summaries_and_plots]
display_as_tabs([(x, plots[idx]) for idx, x in enumerate(data.keys())])

#Duplicate values
summaries = [analysis.get_duplicate_columns(data[x]) for x in data.keys()]
display_as_tabs([(x, summaries[idx]) for idx, x in enumerate(data.keys())])

#Outliers checks
summaries = [analysis.get_outliers(data[x]) for x in data.keys()]
display_as_tabs([(x, summaries[idx]) for idx, x in enumerate(data.keys())])

#Health analysis report
os.environ['DEBUG'] = 'true'
health_reports_gen = [health.summary_report(data[x],save_path=r'./health_report_'+x+'.html') for x in data.keys()]
